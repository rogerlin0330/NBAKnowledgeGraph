package edu.usc.viterbi.dsci.dsci558project.dao.sqlprovider;

import edu.usc.viterbi.dsci.dsci558project.domain.PlayerBasic;
import edu.usc.viterbi.dsci.dsci558project.domain.PlayerBasicExample.Criteria;
import edu.usc.viterbi.dsci.dsci558project.domain.PlayerBasicExample.Criterion;
import edu.usc.viterbi.dsci.dsci558project.domain.PlayerBasicExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class PlayerBasicSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLAYER_BASIC
     *
     * @mbg.generated Mon Nov 09 10:38:24 PST 2020
     */
    public String countByExample(PlayerBasicExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("PLAYER_BASIC");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLAYER_BASIC
     *
     * @mbg.generated Mon Nov 09 10:38:24 PST 2020
     */
    public String deleteByExample(PlayerBasicExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("PLAYER_BASIC");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLAYER_BASIC
     *
     * @mbg.generated Mon Nov 09 10:38:24 PST 2020
     */
    public String insertSelective(PlayerBasic record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("PLAYER_BASIC");

        if (record.getRecordId() != null) {
            sql.VALUES("record_id", "#{recordId,jdbcType=VARCHAR}");
        }

        if (record.getPlayerId() != null) {
            sql.VALUES("player_id", "#{playerId,jdbcType=VARCHAR}");
        }

        if (record.getPlayerUrl() != null) {
            sql.VALUES("player_url", "#{playerUrl,jdbcType=VARCHAR}");
        }

        if (record.getPlayerName() != null) {
            sql.VALUES("player_name", "#{playerName,jdbcType=VARCHAR}");
        }

        if (record.getPlayerFullName() != null) {
            sql.VALUES("player_full_name", "#{playerFullName,jdbcType=VARCHAR}");
        }

        if (record.getDateOfBirth() != null) {
            sql.VALUES("date_of_birth", "#{dateOfBirth,jdbcType=VARCHAR}");
        }

        if (record.getPlaceOfBirth() != null) {
            sql.VALUES("place_of_birth", "#{placeOfBirth,jdbcType=VARCHAR}");
        }

        if (record.getHeight() != null) {
            sql.VALUES("height", "#{height,jdbcType=DOUBLE}");
        }

        if (record.getWeight() != null) {
            sql.VALUES("weight", "#{weight,jdbcType=DOUBLE}");
        }

        if (record.getCollege() != null) {
            sql.VALUES("college", "#{college,jdbcType=VARCHAR}");
        }

        if (record.getHighSchool() != null) {
            sql.VALUES("high_school", "#{highSchool,jdbcType=VARCHAR}");
        }

        if (record.getDominantHand() != null) {
            sql.VALUES("dominant_hand", "#{dominantHand,jdbcType=VARCHAR}");
        }

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLAYER_BASIC
     *
     * @mbg.generated Mon Nov 09 10:38:24 PST 2020
     */
    public String selectByExample(PlayerBasicExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("record_id");
        } else {
            sql.SELECT("record_id");
        }
        sql.SELECT("player_id");
        sql.SELECT("player_url");
        sql.SELECT("player_name");
        sql.SELECT("player_full_name");
        sql.SELECT("date_of_birth");
        sql.SELECT("place_of_birth");
        sql.SELECT("height");
        sql.SELECT("weight");
        sql.SELECT("college");
        sql.SELECT("high_school");
        sql.SELECT("dominant_hand");
        sql.FROM("PLAYER_BASIC");
        applyWhere(sql, example, false);

        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }

        return sql.toString();
    }

    public String selectCompactByExample(PlayerBasicExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("record_id");
        } else {
            sql.SELECT("record_id");
        }
        sql.SELECT("player_id");
        sql.SELECT("player_name");
        sql.SELECT("player_full_name");
        sql.SELECT("date_of_birth");
        sql.SELECT("place_of_birth");
        sql.FROM("PLAYER_BASIC");
        applyWhere(sql, example, false);

        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLAYER_BASIC
     *
     * @mbg.generated Mon Nov 09 10:38:24 PST 2020
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        PlayerBasic record = (PlayerBasic) parameter.get("record");
        PlayerBasicExample example = (PlayerBasicExample) parameter.get("example");

        SQL sql = new SQL();
        sql.UPDATE("PLAYER_BASIC");

        if (record.getRecordId() != null) {
            sql.SET("record_id = #{record.recordId,jdbcType=VARCHAR}");
        }

        if (record.getPlayerId() != null) {
            sql.SET("player_id = #{record.playerId,jdbcType=VARCHAR}");
        }

        if (record.getPlayerUrl() != null) {
            sql.SET("player_url = #{record.playerUrl,jdbcType=VARCHAR}");
        }

        if (record.getPlayerName() != null) {
            sql.SET("player_name = #{record.playerName,jdbcType=VARCHAR}");
        }

        if (record.getPlayerFullName() != null) {
            sql.SET("player_full_name = #{record.playerFullName,jdbcType=VARCHAR}");
        }

        if (record.getDateOfBirth() != null) {
            sql.SET("date_of_birth = #{record.dateOfBirth,jdbcType=VARCHAR}");
        }

        if (record.getPlaceOfBirth() != null) {
            sql.SET("place_of_birth = #{record.placeOfBirth,jdbcType=VARCHAR}");
        }

        if (record.getHeight() != null) {
            sql.SET("height = #{record.height,jdbcType=DOUBLE}");
        }

        if (record.getWeight() != null) {
            sql.SET("weight = #{record.weight,jdbcType=DOUBLE}");
        }

        if (record.getCollege() != null) {
            sql.SET("college = #{record.college,jdbcType=VARCHAR}");
        }

        if (record.getHighSchool() != null) {
            sql.SET("high_school = #{record.highSchool,jdbcType=VARCHAR}");
        }

        if (record.getDominantHand() != null) {
            sql.SET("dominant_hand = #{record.dominantHand,jdbcType=VARCHAR}");
        }

        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLAYER_BASIC
     *
     * @mbg.generated Mon Nov 09 10:38:24 PST 2020
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("PLAYER_BASIC");

        sql.SET("record_id = #{record.recordId,jdbcType=VARCHAR}");
        sql.SET("player_id = #{record.playerId,jdbcType=VARCHAR}");
        sql.SET("player_url = #{record.playerUrl,jdbcType=VARCHAR}");
        sql.SET("player_name = #{record.playerName,jdbcType=VARCHAR}");
        sql.SET("player_full_name = #{record.playerFullName,jdbcType=VARCHAR}");
        sql.SET("date_of_birth = #{record.dateOfBirth,jdbcType=VARCHAR}");
        sql.SET("place_of_birth = #{record.placeOfBirth,jdbcType=VARCHAR}");
        sql.SET("height = #{record.height,jdbcType=DOUBLE}");
        sql.SET("weight = #{record.weight,jdbcType=DOUBLE}");
        sql.SET("college = #{record.college,jdbcType=VARCHAR}");
        sql.SET("high_school = #{record.highSchool,jdbcType=VARCHAR}");
        sql.SET("dominant_hand = #{record.dominantHand,jdbcType=VARCHAR}");

        PlayerBasicExample example = (PlayerBasicExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLAYER_BASIC
     *
     * @mbg.generated Mon Nov 09 10:38:24 PST 2020
     */
    public String updateByPrimaryKeySelective(PlayerBasic record) {
        SQL sql = new SQL();
        sql.UPDATE("PLAYER_BASIC");

        if (record.getPlayerId() != null) {
            sql.SET("player_id = #{playerId,jdbcType=VARCHAR}");
        }

        if (record.getPlayerUrl() != null) {
            sql.SET("player_url = #{playerUrl,jdbcType=VARCHAR}");
        }

        if (record.getPlayerName() != null) {
            sql.SET("player_name = #{playerName,jdbcType=VARCHAR}");
        }

        if (record.getPlayerFullName() != null) {
            sql.SET("player_full_name = #{playerFullName,jdbcType=VARCHAR}");
        }

        if (record.getDateOfBirth() != null) {
            sql.SET("date_of_birth = #{dateOfBirth,jdbcType=VARCHAR}");
        }

        if (record.getPlaceOfBirth() != null) {
            sql.SET("place_of_birth = #{placeOfBirth,jdbcType=VARCHAR}");
        }

        if (record.getHeight() != null) {
            sql.SET("height = #{height,jdbcType=DOUBLE}");
        }

        if (record.getWeight() != null) {
            sql.SET("weight = #{weight,jdbcType=DOUBLE}");
        }

        if (record.getCollege() != null) {
            sql.SET("college = #{college,jdbcType=VARCHAR}");
        }

        if (record.getHighSchool() != null) {
            sql.SET("high_school = #{highSchool,jdbcType=VARCHAR}");
        }

        if (record.getDominantHand() != null) {
            sql.SET("dominant_hand = #{dominantHand,jdbcType=VARCHAR}");
        }

        sql.WHERE("record_id = #{recordId,jdbcType=VARCHAR}");

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PLAYER_BASIC
     *
     * @mbg.generated Mon Nov 09 10:38:24 PST 2020
     */
    protected void applyWhere(SQL sql, PlayerBasicExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }

        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }

        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }

                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }

                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }

        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}
